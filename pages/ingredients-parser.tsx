import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import styles from "../styles/Home.module.css";
import Clipboard from "react-clipboard.js";
import syntaxHighlight from "../utils/syntaxHighlight";
import { useTimedState } from "../hooks/useTimeout";
import { processRecipeLine } from "../utils/ingredientsParsing";
import UNITS from "../utils/units";

const fraction = require("fraction.js");

function fixupSymbols(str: string) {
  return str
    .replace(/¼/g, "1/4")
    .replace(/½/g, "1/2")
    .replace(/¾/g, "3/4")
    .replace(/⅔/g, "2/3")
    .replace(/⅓/g, "1/3")
    .replace(/1½/g, "1 1/2")
    .replace(/11\/2/g, "1 1/2")
    .replace(/11\/3/g, "1 1/3")
    .replace(/11\/4/g, "1 1/4")
    .replace(/tablespoons/g, "tbsp")
    .replace(/teaspoons/g, "tsp")
    .replace(/; /g, "\n");
}

function processRawRecipePaste(text: string) {
  const lines = text.split("\n").map(fixupSymbols);
  return JSON.stringify(lines.map(processRecipeLine), undefined, 4);
}

const IngredientsParser: NextPage = () => {
  const [val, setVal] = useState("");
  const [output, setOutput] = useState("");
  const [copiedVisible, setCopiedVisible] = useTimedState(false, 1500);

  const handleChange = (text: string) => {
    const quoteErrorRegExp = /^\"|"$/g;
    let fixed = text.replace(/\;\s/g, "\n").replace(quoteErrorRegExp, "");
    if (fixed.startsWith('"')) {
      fixed = fixed;
    }
    setVal(fixed);
    setOutput(processRawRecipePaste(fixed));
  };

  return (
    <>
      <Head>
        <title>VegWeek App Ingredient Parser</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1>Input</h1>
      <textarea
        style={{ width: "100%", height: 200 }}
        value={val}
        onChange={(e) => handleChange(e.currentTarget.value)}
      />
      <h1>Output</h1>
      <Clipboard
        data-clipboard-text={output}
        onSuccess={() => setCopiedVisible(true)}
      >
        {copiedVisible && "Copied"}
        {!copiedVisible && "copy to clipboard"}
      </Clipboard>
      <pre dangerouslySetInnerHTML={{ __html: syntaxHighlight(output) }} />
    </>
  );
};

export default IngredientsParser;
